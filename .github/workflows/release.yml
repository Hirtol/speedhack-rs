name: Stable Release
on:
  push:
    tags:
      - 'v[0-9]+.*' # Release tags matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

jobs:
  create_release:
    name: Create Github Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.github_create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Create Release
        id: github_create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: speedhack-rs ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

  build_release_assets:
    name: Build release assets
    needs: [create_release]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: windows-latest, toolchain: stable-x86_64-pc-windows-msvc, target: i686-pc-windows-msvc }
          - { os: windows-latest, toolchain: stable-x86_64-pc-windows-msvc, target: x86_64-pc-windows-msvc }

    steps:
      - uses: actions/checkout@master
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.config.toolchain }}
          target: ${{ matrix.config.target }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build release asset
        run: cargo build --release --target ${{ matrix.config.target }}

      - name: Package asset as zip
        run: |
          $archive = "speedhack-rs-${{ needs.create_release.outputs.version }}-${{ matrix.config.target }}.zip"
          Compress-Archive -LiteralPath .\target\${{ matrix.config.target }}\release\version.dll -DestinationPath $archive
          @"
          RELEASE_ARCHIVE=$archive
          RELEASE_CONTENT_TYPE=application/zip
          "@ | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload binaries to release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ env.RELEASE_ARCHIVE }}
          asset_name: ${{ env.RELEASE_ARCHIVE }}
          asset_content_type: ${{ env.RELEASE_CONTENT_TYPE }}

      - name: Clear the cargo caches
        run: |
          cargo install cargo-cache --no-default-features --features ci-autoclean
          cargo-cache